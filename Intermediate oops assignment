//q1.  Write a singleton class. Confirm that singleton class cannot be inherited.
public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // Private constructor to prevent instantiation from outside the class
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }

    public void showMessage() {
        System.out.println("Hello, I am a Singleton class!");
    }
}

public class SubClass extends Singleton {
    // This class attempts to inherit from Singleton class, but it's not allowed
}

public class Main {
    public static void main(String[] args) {
        // Creating a Singleton instance
        Singleton singleton = Singleton.getInstance();
        singleton.showMessage();

        // Attempting to create a SubClass instance (which is not allowed)
        SubClass subClass = new SubClass(); // This will give a compilation error
    }
}

// Q2. Write a program that describes the hierarchy of an organization. Here we need to write 3 classes Employee, Manager & Labour where Manager & Labour are the sub classes of the Employee. Manager has incentive & Labour has over time. Add the functionality to calculate total salary of all the employees. Use polymorphism i.e. method overriding.
import java.util.ArrayList;
import java.util.List;

// Base class for all employees
class Employee {
    private String name;
    private double baseSalary;

    public Employee(String name, double baseSalary) {
        this.name = name;
        this.baseSalary = baseSalary;
    }

    // Calculate the salary for the employee
    public double calculateSalary() {
        return baseSalary;
    }

    public String getName() {
        return name;
    }
}

// Subclass for managers, inherits from Employee
class Manager extends Employee {
    private double incentives;

    public Manager(String name, double baseSalary, double incentives) {
        super(name, baseSalary);
        this.incentives = incentives;
    }

    // Override the calculateSalary() method to include incentives
    @Override
    public double calculateSalary() {
        return super.calculateSalary() + incentives;
    }
}

// Subclass for labour, inherits from Employee
class Labour extends Employee {
    private double overtime;

    public Labour(String name, double baseSalary, double overtime) {
        super(name, baseSalary);
        this.overtime = overtime;
    }

    // Override the calculateSalary() method to include overtime pay
    @Override
    public double calculateSalary() {
        return super.calculateSalary() + overtime;
    }
}

public class Organization {
    public static void main(String[] args) {
        // Create a list to store employees
        List<Employee> employees = new ArrayList<>();

        // Create instances of Manager and Labour employees
        Manager manager1 = new Manager("John Smith", 5000.0, 1000.0);
        Manager manager2 = new Manager("Jane Doe", 6000.0, 1500.0);
        Labour labour1 = new Labour("Mike Johnson", 2000.0, 300.0);
        Labour labour2 = new Labour("Sarah Brown", 2500.0, 200.0);

        // Add employees to the list
        employees.add(manager1);
        employees.add(manager2);
        employees.add(labour1);
        employees.add(labour2);

        // Calculate the total salary of all employees
        double totalSalary = calculateTotalSalary(employees);

        // Print the total salary
        System.out.println("Total Salary of all employees: $" + totalSalary);
    }

    // Calculate the total salary of all employees
    public static double calculateTotalSalary(List<Employee> employees) {
        double totalSalary = 0.0;

        // Iterate over the list of employees and calculate their individual salaries
        for (Employee employee : employees) {
            totalSalary += employee.calculateSalary();
        }

        return totalSalary;
    }
}
